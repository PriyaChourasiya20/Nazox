{"ast":null,"code":"import { takeEvery, fork, put, all, call } from 'redux-saga/effects'; // Login Redux States\n\nimport { FORGET_USER } from './actionTypes';\nimport { forgetUserSuccessful, userForgetPasswordError } from './actions'; // AUTH related methods\n\nimport { postForgetPwd } from '../../../helpers/fackBackend_Helper';\nimport { getFirebaseBackend } from \"../../../helpers/firebase_helper\"; //Initilize firebase\n\nconst fireBaseBackend = getFirebaseBackend(); //If user is login then dispatch redux action's are directly from here.\n\nfunction* forgetUser(_ref) {\n  let {\n    payload: {\n      user,\n      history\n    }\n  } = _ref;\n\n  try {\n    if (process.env.REACT_APP_DEFAULTAUTH === \"firebase\") {\n      const response = yield call(fireBaseBackend.forgetPassword, user.useremail);\n\n      if (response) {\n        yield put(forgetUserSuccessful(\"Reset link are sended to your mailbox, check there first\"));\n      }\n    } else {\n      const response = yield call(postForgetPwd, '/forget-pwd', {\n        email: user.useremail\n      });\n\n      if (response) {\n        yield put(forgetUserSuccessful(\"Reset link are sended to your mailbox, check there first\"));\n      }\n    }\n  } catch (error) {\n    yield put(userForgetPasswordError(error));\n  }\n}\n\nexport function* watchUserForget() {\n  yield takeEvery(FORGET_USER, forgetUser);\n}\n\nfunction* forgetSaga() {\n  yield all([fork(watchUserForget)]);\n}\n\nexport default forgetSaga;","map":{"version":3,"names":["takeEvery","fork","put","all","call","FORGET_USER","forgetUserSuccessful","userForgetPasswordError","postForgetPwd","getFirebaseBackend","fireBaseBackend","forgetUser","payload","user","history","process","env","REACT_APP_DEFAULTAUTH","response","forgetPassword","useremail","email","error","watchUserForget","forgetSaga"],"sources":["/home/rovi91/Downloads/copy (new)/src/store/auth/forgetpwd/saga.js"],"sourcesContent":["import { takeEvery, fork, put, all, call } from 'redux-saga/effects';\r\n\r\n// Login Redux States\r\nimport { FORGET_USER } from './actionTypes';\r\nimport { forgetUserSuccessful, userForgetPasswordError } from './actions';\r\n\r\n// AUTH related methods\r\nimport { postForgetPwd } from '../../../helpers/fackBackend_Helper';\r\nimport { getFirebaseBackend } from \"../../../helpers/firebase_helper\";\r\n\r\n//Initilize firebase\r\nconst fireBaseBackend = getFirebaseBackend();\r\n\r\n//If user is login then dispatch redux action's are directly from here.\r\nfunction* forgetUser({ payload: { user, history } }) {\r\n        try {\r\n            if(process.env.REACT_APP_DEFAULTAUTH === \"firebase\"){\r\n                const response = yield call(fireBaseBackend.forgetPassword, user.useremail);\r\n                if (response) {\r\n                  yield put(\r\n                    forgetUserSuccessful(\r\n                      \"Reset link are sended to your mailbox, check there first\"\r\n                    )\r\n                  );\r\n                }\r\n            }else{\r\n                const response = yield call(postForgetPwd, '/forget-pwd', {email: user.useremail});\r\n                if (response) {\r\n                    yield put(\r\n                        forgetUserSuccessful(\r\n                        \"Reset link are sended to your mailbox, check there first\"\r\n                      )\r\n                    );\r\n                }\r\n            }            \r\n        } catch (error) {\r\n            yield put(userForgetPasswordError(error));\r\n        }\r\n}\r\n\r\nexport function* watchUserForget() {\r\n    yield takeEvery(FORGET_USER, forgetUser)\r\n}\r\n\r\nfunction* forgetSaga() {\r\n    yield all([fork(watchUserForget)]);\r\n}\r\n\r\nexport default forgetSaga;"],"mappings":"AAAA,SAASA,SAAT,EAAoBC,IAApB,EAA0BC,GAA1B,EAA+BC,GAA/B,EAAoCC,IAApC,QAAgD,oBAAhD,C,CAEA;;AACA,SAASC,WAAT,QAA4B,eAA5B;AACA,SAASC,oBAAT,EAA+BC,uBAA/B,QAA8D,WAA9D,C,CAEA;;AACA,SAASC,aAAT,QAA8B,qCAA9B;AACA,SAASC,kBAAT,QAAmC,kCAAnC,C,CAEA;;AACA,MAAMC,eAAe,GAAGD,kBAAkB,EAA1C,C,CAEA;;AACA,UAAUE,UAAV,OAAqD;EAAA,IAAhC;IAAEC,OAAO,EAAE;MAAEC,IAAF;MAAQC;IAAR;EAAX,CAAgC;;EAC7C,IAAI;IACA,IAAGC,OAAO,CAACC,GAAR,CAAYC,qBAAZ,KAAsC,UAAzC,EAAoD;MAChD,MAAMC,QAAQ,GAAG,MAAMd,IAAI,CAACM,eAAe,CAACS,cAAjB,EAAiCN,IAAI,CAACO,SAAtC,CAA3B;;MACA,IAAIF,QAAJ,EAAc;QACZ,MAAMhB,GAAG,CACPI,oBAAoB,CAClB,0DADkB,CADb,CAAT;MAKD;IACJ,CATD,MASK;MACD,MAAMY,QAAQ,GAAG,MAAMd,IAAI,CAACI,aAAD,EAAgB,aAAhB,EAA+B;QAACa,KAAK,EAAER,IAAI,CAACO;MAAb,CAA/B,CAA3B;;MACA,IAAIF,QAAJ,EAAc;QACV,MAAMhB,GAAG,CACLI,oBAAoB,CACpB,0DADoB,CADf,CAAT;MAKH;IACJ;EACJ,CApBD,CAoBE,OAAOgB,KAAP,EAAc;IACZ,MAAMpB,GAAG,CAACK,uBAAuB,CAACe,KAAD,CAAxB,CAAT;EACH;AACR;;AAED,OAAO,UAAUC,eAAV,GAA4B;EAC/B,MAAMvB,SAAS,CAACK,WAAD,EAAcM,UAAd,CAAf;AACH;;AAED,UAAUa,UAAV,GAAuB;EACnB,MAAMrB,GAAG,CAAC,CAACF,IAAI,CAACsB,eAAD,CAAL,CAAD,CAAT;AACH;;AAED,eAAeC,UAAf"},"metadata":{},"sourceType":"module"}