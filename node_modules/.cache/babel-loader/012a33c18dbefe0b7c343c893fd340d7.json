{"ast":null,"code":"import axios from \"axios\";\nimport MockAdapter from \"axios-mock-adapter\"; // import * as url from \"../url_helper\";\n// import {\n//   calenderDefaultCategories,\n//   events,\n//   orders,\n//   productsData,\n//   customerData,\n//   shops,\n//   cartData,\n//   comments,\n//   chats,\n//   groups,\n//   messages,\n//   contacts\n// } from \"../../common/data\";\n\nlet users = [{\n  id: 1,\n  username: \"admin\",\n  password: \"123456\",\n  email: \"admin@themesdesign.in\"\n}];\n\nconst fakeBackend = () => {\n  // This sets the mock adapter on the default instance\n  var mock = new MockAdapter(axios);\n  mock.onPost(\"/post-register\").reply(function (config) {\n    const user = JSON.parse(config[\"data\"]);\n    users.push(user);\n    return new Promise(function (resolve, reject) {\n      setTimeout(function () {\n        resolve([200, user]);\n      });\n    });\n  });\n  mock.onPost(\"/post-login\").reply(function (config) {\n    const user = JSON.parse(config[\"data\"]);\n    const validUser = users.filter(usr => usr.email === user.username && usr.password === user.password);\n    return new Promise(function (resolve, reject) {\n      setTimeout(function () {\n        if (validUser[\"length\"] === 1) {\n          resolve([200, validUser[0]]);\n        } else {\n          reject([400, \"Username and password are invalid. Please enter correct username and password\"]);\n        }\n      });\n    });\n  });\n  mock.onPost(\"/forget-pwd\").reply(function (config) {\n    // User needs to check that user is eXist or not and send mail for Reset New password\n    return new Promise(function (resolve, reject) {\n      setTimeout(function () {\n        resolve([200, \"Check you mail and reset your password.\"]);\n      });\n    });\n  }); // mock.onGet(url.GET_EVENTS).reply(() => {\n  //   return new Promise((resolve, reject) => {\n  //     setTimeout(() => {\n  //       if (events) {\n  //         // Passing fake JSON data as response\n  //         resolve([200, events])\n  //       } else {\n  //         reject([400, \"Cannot get events\"])\n  //       }\n  //     })\n  //   })\n  // })\n  // mock.onPost(url.ADD_NEW_EVENT).reply(event => {\n  //   return new Promise((resolve, reject) => {\n  //     setTimeout(() => {\n  //       if (event && event.data) {\n  //         // Passing fake JSON data as response\n  //         resolve([200, event.data])\n  //       } else {\n  //         reject([400, \"Cannot add event\"])\n  //       }\n  //     })\n  //   })\n  // });\n  // mock.onPut(url.UPDATE_EVENT).reply(event => {\n  //   return new Promise((resolve, reject) => {\n  //     setTimeout(() => {\n  //       if (event && event.data) {\n  //         // Passing fake JSON data as response\n  //         resolve([200, event.data])\n  //       } else {\n  //         reject([400, \"Cannot update event\"])\n  //       }\n  //     })\n  //   })\n  // })\n  // mock.onDelete(url.DELETE_EVENT).reply(config => {\n  //   return new Promise((resolve, reject) => {\n  //     setTimeout(() => {\n  //       if (config && config.headers) {\n  //         // Passing fake JSON data as response\n  //         resolve([200, config.headers.event])\n  //       } else {\n  //         reject([400, \"Cannot delete event\"])\n  //       }\n  //     })\n  //   })\n  // })\n  // mock.onGet(url.GET_CATEGORIES).reply(() => {\n  //   return new Promise((resolve, reject) => {\n  //     setTimeout(() => {\n  //       if (calenderDefaultCategories) {\n  //         // Passing fake JSON data as response\n  //         resolve([200, calenderDefaultCategories])\n  //       } else {\n  //         reject([400, \"Cannot get categories\"])\n  //       }\n  //     })\n  //   })\n  // });\n  // mock.onGet(url.GET_PRODUCTS).reply(() => {\n  //   return new Promise((resolve, reject) => {\n  //     setTimeout(() => {\n  //       if (productsData) {\n  //         // Passing fake JSON data as response\n  //         resolve([200, productsData])\n  //       } else {\n  //         reject([400, \"Cannot get products\"])\n  //       }\n  //     })\n  //   })\n  // });\n  // mock.onGet(new RegExp(`${url.GET_PRODUCTS_DETAIL}/*`)).reply(config => {\n  //   return new Promise((resolve, reject) => {\n  //     setTimeout(() => {\n  //       if (productsData) {\n  //         // Passing fake JSON data as response\n  //         const { params } = config\n  //         const product = productsData.find(\n  //           product => product.id.toString() === params.id.toString()\n  //         )\n  //         resolve([200, { ...product, comments }])\n  //       } else {\n  //         reject([400, \"Cannot get product detail\"])\n  //       }\n  //     })\n  //   })\n  // });\n  // mock.onGet(url.GET_ORDERS).reply(() => {\n  //   return new Promise((resolve, reject) => {\n  //     setTimeout(() => {\n  //       if (orders) {\n  //         // Passing fake JSON data as response\n  //         resolve([200, orders])\n  //       } else {\n  //         reject([400, \"Cannot get orders\"])\n  //       }\n  //     })\n  //   })\n  // })\n  //   mock.onGet(url.GET_CART_DATA).reply(() => {\n  //   return new Promise((resolve, reject) => {\n  //     setTimeout(() => {\n  //       if (cartData) {\n  //         // Passing fake JSON data as response\n  //         resolve([200, cartData])\n  //       } else {\n  //         reject([400, \"Cannot get cart data\"])\n  //       }\n  //     })\n  //   })\n  // })\n  // mock.onGet(url.GET_CUSTOMERS).reply(() => {\n  //   return new Promise((resolve, reject) => {\n  //     setTimeout(() => {\n  //       if (customerData) {\n  //         // Passing fake JSON data as response\n  //         resolve([200, customerData])\n  //       } else {\n  //         reject([400, \"Cannot get customers data\"])\n  //       }\n  //     })\n  //   })\n  // })\n  // mock.onGet(url.GET_SHOPS).reply(() => {\n  //   return new Promise((resolve, reject) => {\n  //     setTimeout(() => {\n  //       if (shops) {\n  //         // Passing fake JSON data as response\n  //         resolve([200, shops])\n  //       } else {\n  //         reject([400, \"Cannot get shops data\"])\n  //       }\n  //     })\n  //   })\n  // })\n  // mock.onGet(url.GET_CHATS).reply(() => {\n  //   return new Promise((resolve, reject) => {\n  //     setTimeout(() => {\n  //       if (chats) {\n  //         // Passing fake JSON data as response\n  //         resolve([200, chats])\n  //       } else {\n  //         reject([400, \"Cannot get chats\"])\n  //       }\n  //     })\n  //   })\n  // })\n  // mock.onGet(url.GET_GROUPS).reply(() => {\n  //   return new Promise((resolve, reject) => {\n  //     setTimeout(() => {\n  //       if (groups) {\n  //         // Passing fake JSON data as response\n  //         resolve([200, groups])\n  //       } else {\n  //         reject([400, \"Cannot get groups\"])\n  //       }\n  //     })\n  //   })\n  // })\n  // mock.onGet(url.GET_CONTACTS).reply(() => {\n  //   return new Promise((resolve, reject) => {\n  //     setTimeout(() => {\n  //       if (contacts) {\n  //         // Passing fake JSON data as response\n  //         resolve([200, contacts])\n  //       } else {\n  //         reject([400, \"Cannot get contacts\"])\n  //       }\n  //     })\n  //   })\n  // })\n  // mock.onGet(new RegExp(`${url.GET_MESSAGES}/*`)).reply(config => {\n  //   return new Promise((resolve, reject) => {\n  //     setTimeout(() => {\n  //       if (messages) {\n  //         // Passing fake JSON data as response\n  //         const { params } = config\n  //         const filteredMessages = messages.filter(\n  //           msg => msg.roomId === params.roomId\n  //         )\n  //         resolve([200, filteredMessages])\n  //       } else {\n  //         reject([400, \"Cannot get messages\"])\n  //       }\n  //     })\n  //   })\n  // })\n  // mock.onPost(url.ADD_MESSAGE).reply(config => {\n  //   return new Promise((resolve, reject) => {\n  //     setTimeout(() => {\n  //       if (config.data) {\n  //         // Passing fake JSON data as response\n  //         resolve([200, config.data])\n  //       } else {\n  //         reject([400, \"Cannot add message\"])\n  //       }\n  //     })\n  //   })\n  // })\n};\n\nexport default fakeBackend;","map":{"version":3,"names":["axios","MockAdapter","users","id","username","password","email","fakeBackend","mock","onPost","reply","config","user","JSON","parse","push","Promise","resolve","reject","setTimeout","validUser","filter","usr"],"sources":["/home/rovi91/Downloads/copy (new)/src/helpers/AuthType/fakeBackend.js"],"sourcesContent":["import axios from \"axios\";\r\nimport MockAdapter from \"axios-mock-adapter\";\r\n// import * as url from \"../url_helper\";\r\n\r\n// import {\r\n//   calenderDefaultCategories,\r\n//   events,\r\n//   orders,\r\n//   productsData,\r\n//   customerData,\r\n//   shops,\r\n//   cartData,\r\n//   comments,\r\n//   chats,\r\n//   groups,\r\n//   messages,\r\n//   contacts\r\n// } from \"../../common/data\";\r\n\r\nlet users = [\r\n  {\r\n    id: 1,\r\n    username: \"admin\",\r\n    password: \"123456\",\r\n    email: \"admin@themesdesign.in\",\r\n  },\r\n];\r\n\r\nconst fakeBackend = () => {\r\n  // This sets the mock adapter on the default instance\r\n  var mock = new MockAdapter(axios);\r\n\r\n  mock.onPost(\"/post-register\").reply(function (config) {\r\n    const user = JSON.parse(config[\"data\"]);\r\n    users.push(user);\r\n\r\n    return new Promise(function (resolve, reject) {\r\n      setTimeout(function () {\r\n        resolve([200, user]);\r\n      });\r\n    });\r\n  });\r\n\r\n  mock.onPost(\"/post-login\").reply(function (config) {\r\n    const user = JSON.parse(config[\"data\"]);\r\n    const validUser = users.filter(\r\n      (usr) => usr.email === user.username && usr.password === user.password\r\n    );\r\n\r\n    return new Promise(function (resolve, reject) {\r\n      setTimeout(function () {\r\n        if (validUser[\"length\"] === 1) {\r\n          resolve([200, validUser[0]]);\r\n        } else {\r\n          reject([\r\n            400,\r\n            \"Username and password are invalid. Please enter correct username and password\",\r\n          ]);\r\n        }\r\n      });\r\n    });\r\n  });\r\n\r\n  mock.onPost(\"/forget-pwd\").reply(function (config) {\r\n    // User needs to check that user is eXist or not and send mail for Reset New password\r\n\r\n    return new Promise(function (resolve, reject) {\r\n      setTimeout(function () {\r\n        resolve([200, \"Check you mail and reset your password.\"]);\r\n      });\r\n    });\r\n  });\r\n  // mock.onGet(url.GET_EVENTS).reply(() => {\r\n  //   return new Promise((resolve, reject) => {\r\n  //     setTimeout(() => {\r\n  //       if (events) {\r\n  //         // Passing fake JSON data as response\r\n  //         resolve([200, events])\r\n  //       } else {\r\n  //         reject([400, \"Cannot get events\"])\r\n  //       }\r\n  //     })\r\n  //   })\r\n  // })\r\n\r\n  // mock.onPost(url.ADD_NEW_EVENT).reply(event => {\r\n  //   return new Promise((resolve, reject) => {\r\n  //     setTimeout(() => {\r\n  //       if (event && event.data) {\r\n  //         // Passing fake JSON data as response\r\n  //         resolve([200, event.data])\r\n  //       } else {\r\n  //         reject([400, \"Cannot add event\"])\r\n  //       }\r\n  //     })\r\n  //   })\r\n  // });\r\n\r\n  // mock.onPut(url.UPDATE_EVENT).reply(event => {\r\n  //   return new Promise((resolve, reject) => {\r\n  //     setTimeout(() => {\r\n  //       if (event && event.data) {\r\n  //         // Passing fake JSON data as response\r\n  //         resolve([200, event.data])\r\n  //       } else {\r\n  //         reject([400, \"Cannot update event\"])\r\n  //       }\r\n  //     })\r\n  //   })\r\n  // })\r\n\r\n  // mock.onDelete(url.DELETE_EVENT).reply(config => {\r\n  //   return new Promise((resolve, reject) => {\r\n  //     setTimeout(() => {\r\n  //       if (config && config.headers) {\r\n  //         // Passing fake JSON data as response\r\n  //         resolve([200, config.headers.event])\r\n  //       } else {\r\n  //         reject([400, \"Cannot delete event\"])\r\n  //       }\r\n  //     })\r\n  //   })\r\n  // })\r\n\r\n  // mock.onGet(url.GET_CATEGORIES).reply(() => {\r\n  //   return new Promise((resolve, reject) => {\r\n  //     setTimeout(() => {\r\n  //       if (calenderDefaultCategories) {\r\n  //         // Passing fake JSON data as response\r\n  //         resolve([200, calenderDefaultCategories])\r\n  //       } else {\r\n  //         reject([400, \"Cannot get categories\"])\r\n  //       }\r\n  //     })\r\n  //   })\r\n  // });\r\n\r\n  // mock.onGet(url.GET_PRODUCTS).reply(() => {\r\n  //   return new Promise((resolve, reject) => {\r\n  //     setTimeout(() => {\r\n  //       if (productsData) {\r\n  //         // Passing fake JSON data as response\r\n  //         resolve([200, productsData])\r\n  //       } else {\r\n  //         reject([400, \"Cannot get products\"])\r\n  //       }\r\n  //     })\r\n  //   })\r\n  // });\r\n\r\n  // mock.onGet(new RegExp(`${url.GET_PRODUCTS_DETAIL}/*`)).reply(config => {\r\n  //   return new Promise((resolve, reject) => {\r\n  //     setTimeout(() => {\r\n  //       if (productsData) {\r\n  //         // Passing fake JSON data as response\r\n  //         const { params } = config\r\n  //         const product = productsData.find(\r\n  //           product => product.id.toString() === params.id.toString()\r\n  //         )\r\n  //         resolve([200, { ...product, comments }])\r\n  //       } else {\r\n  //         reject([400, \"Cannot get product detail\"])\r\n  //       }\r\n  //     })\r\n  //   })\r\n  // });\r\n\r\n  // mock.onGet(url.GET_ORDERS).reply(() => {\r\n  //   return new Promise((resolve, reject) => {\r\n  //     setTimeout(() => {\r\n  //       if (orders) {\r\n  //         // Passing fake JSON data as response\r\n  //         resolve([200, orders])\r\n  //       } else {\r\n  //         reject([400, \"Cannot get orders\"])\r\n  //       }\r\n  //     })\r\n  //   })\r\n  // })\r\n\r\n  //   mock.onGet(url.GET_CART_DATA).reply(() => {\r\n  //   return new Promise((resolve, reject) => {\r\n  //     setTimeout(() => {\r\n  //       if (cartData) {\r\n  //         // Passing fake JSON data as response\r\n  //         resolve([200, cartData])\r\n  //       } else {\r\n  //         reject([400, \"Cannot get cart data\"])\r\n  //       }\r\n  //     })\r\n  //   })\r\n  // })\r\n\r\n  // mock.onGet(url.GET_CUSTOMERS).reply(() => {\r\n  //   return new Promise((resolve, reject) => {\r\n  //     setTimeout(() => {\r\n  //       if (customerData) {\r\n  //         // Passing fake JSON data as response\r\n  //         resolve([200, customerData])\r\n  //       } else {\r\n  //         reject([400, \"Cannot get customers data\"])\r\n  //       }\r\n  //     })\r\n  //   })\r\n  // })\r\n\r\n  // mock.onGet(url.GET_SHOPS).reply(() => {\r\n  //   return new Promise((resolve, reject) => {\r\n  //     setTimeout(() => {\r\n  //       if (shops) {\r\n  //         // Passing fake JSON data as response\r\n  //         resolve([200, shops])\r\n  //       } else {\r\n  //         reject([400, \"Cannot get shops data\"])\r\n  //       }\r\n  //     })\r\n  //   })\r\n  // })\r\n\r\n  // mock.onGet(url.GET_CHATS).reply(() => {\r\n  //   return new Promise((resolve, reject) => {\r\n  //     setTimeout(() => {\r\n  //       if (chats) {\r\n  //         // Passing fake JSON data as response\r\n  //         resolve([200, chats])\r\n  //       } else {\r\n  //         reject([400, \"Cannot get chats\"])\r\n  //       }\r\n  //     })\r\n  //   })\r\n  // })\r\n\r\n  // mock.onGet(url.GET_GROUPS).reply(() => {\r\n  //   return new Promise((resolve, reject) => {\r\n  //     setTimeout(() => {\r\n  //       if (groups) {\r\n  //         // Passing fake JSON data as response\r\n  //         resolve([200, groups])\r\n  //       } else {\r\n  //         reject([400, \"Cannot get groups\"])\r\n  //       }\r\n  //     })\r\n  //   })\r\n  // })\r\n\r\n  // mock.onGet(url.GET_CONTACTS).reply(() => {\r\n  //   return new Promise((resolve, reject) => {\r\n  //     setTimeout(() => {\r\n  //       if (contacts) {\r\n  //         // Passing fake JSON data as response\r\n  //         resolve([200, contacts])\r\n  //       } else {\r\n  //         reject([400, \"Cannot get contacts\"])\r\n  //       }\r\n  //     })\r\n  //   })\r\n  // })\r\n\r\n  // mock.onGet(new RegExp(`${url.GET_MESSAGES}/*`)).reply(config => {\r\n  //   return new Promise((resolve, reject) => {\r\n  //     setTimeout(() => {\r\n  //       if (messages) {\r\n  //         // Passing fake JSON data as response\r\n  //         const { params } = config\r\n  //         const filteredMessages = messages.filter(\r\n  //           msg => msg.roomId === params.roomId\r\n  //         )\r\n  //         resolve([200, filteredMessages])\r\n  //       } else {\r\n  //         reject([400, \"Cannot get messages\"])\r\n  //       }\r\n  //     })\r\n  //   })\r\n  // })\r\n\r\n  // mock.onPost(url.ADD_MESSAGE).reply(config => {\r\n  //   return new Promise((resolve, reject) => {\r\n  //     setTimeout(() => {\r\n  //       if (config.data) {\r\n  //         // Passing fake JSON data as response\r\n  //         resolve([200, config.data])\r\n  //       } else {\r\n  //         reject([400, \"Cannot add message\"])\r\n  //       }\r\n  //     })\r\n  //   })\r\n  // })\r\n};\r\n\r\nexport default fakeBackend;\r\n"],"mappings":"AAAA,OAAOA,KAAP,MAAkB,OAAlB;AACA,OAAOC,WAAP,MAAwB,oBAAxB,C,CACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA,IAAIC,KAAK,GAAG,CACV;EACEC,EAAE,EAAE,CADN;EAEEC,QAAQ,EAAE,OAFZ;EAGEC,QAAQ,EAAE,QAHZ;EAIEC,KAAK,EAAE;AAJT,CADU,CAAZ;;AASA,MAAMC,WAAW,GAAG,MAAM;EACxB;EACA,IAAIC,IAAI,GAAG,IAAIP,WAAJ,CAAgBD,KAAhB,CAAX;EAEAQ,IAAI,CAACC,MAAL,CAAY,gBAAZ,EAA8BC,KAA9B,CAAoC,UAAUC,MAAV,EAAkB;IACpD,MAAMC,IAAI,GAAGC,IAAI,CAACC,KAAL,CAAWH,MAAM,CAAC,MAAD,CAAjB,CAAb;IACAT,KAAK,CAACa,IAAN,CAAWH,IAAX;IAEA,OAAO,IAAII,OAAJ,CAAY,UAAUC,OAAV,EAAmBC,MAAnB,EAA2B;MAC5CC,UAAU,CAAC,YAAY;QACrBF,OAAO,CAAC,CAAC,GAAD,EAAML,IAAN,CAAD,CAAP;MACD,CAFS,CAAV;IAGD,CAJM,CAAP;EAKD,CATD;EAWAJ,IAAI,CAACC,MAAL,CAAY,aAAZ,EAA2BC,KAA3B,CAAiC,UAAUC,MAAV,EAAkB;IACjD,MAAMC,IAAI,GAAGC,IAAI,CAACC,KAAL,CAAWH,MAAM,CAAC,MAAD,CAAjB,CAAb;IACA,MAAMS,SAAS,GAAGlB,KAAK,CAACmB,MAAN,CACfC,GAAD,IAASA,GAAG,CAAChB,KAAJ,KAAcM,IAAI,CAACR,QAAnB,IAA+BkB,GAAG,CAACjB,QAAJ,KAAiBO,IAAI,CAACP,QAD9C,CAAlB;IAIA,OAAO,IAAIW,OAAJ,CAAY,UAAUC,OAAV,EAAmBC,MAAnB,EAA2B;MAC5CC,UAAU,CAAC,YAAY;QACrB,IAAIC,SAAS,CAAC,QAAD,CAAT,KAAwB,CAA5B,EAA+B;UAC7BH,OAAO,CAAC,CAAC,GAAD,EAAMG,SAAS,CAAC,CAAD,CAAf,CAAD,CAAP;QACD,CAFD,MAEO;UACLF,MAAM,CAAC,CACL,GADK,EAEL,+EAFK,CAAD,CAAN;QAID;MACF,CATS,CAAV;IAUD,CAXM,CAAP;EAYD,CAlBD;EAoBAV,IAAI,CAACC,MAAL,CAAY,aAAZ,EAA2BC,KAA3B,CAAiC,UAAUC,MAAV,EAAkB;IACjD;IAEA,OAAO,IAAIK,OAAJ,CAAY,UAAUC,OAAV,EAAmBC,MAAnB,EAA2B;MAC5CC,UAAU,CAAC,YAAY;QACrBF,OAAO,CAAC,CAAC,GAAD,EAAM,yCAAN,CAAD,CAAP;MACD,CAFS,CAAV;IAGD,CAJM,CAAP;EAKD,CARD,EAnCwB,CA4CxnQD;;AAqQA,eAAeV,WAAf"},"metadata":{},"sourceType":"module"}